// @generated by protobuf-ts 2.10.0 with parameter client_grpc1
// @generated from protobuf file "service-complex.proto" (package "complex", syntax proto3)
// tslint:disable
import { ComplexCompute } from "./service-complex";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { BinaryRequest } from "./service-complex";
import type { OperationResponse } from "./service-complex";
import type { UnaryRequest } from "./service-complex";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service complex.ComplexCompute
 */
export interface IComplexComputeClient {
    /**
     * @generated from protobuf rpc: Sqrt(complex.UnaryRequest) returns (complex.OperationResponse);
     */
    sqrt(input: UnaryRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    sqrt(input: UnaryRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    sqrt(input: UnaryRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    sqrt(input: UnaryRequest, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: Abs(complex.UnaryRequest) returns (complex.OperationResponse);
     */
    abs(input: UnaryRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    abs(input: UnaryRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    abs(input: UnaryRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    abs(input: UnaryRequest, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: Power(complex.BinaryRequest) returns (complex.OperationResponse);
     */
    power(input: BinaryRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    power(input: BinaryRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    power(input: BinaryRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    power(input: BinaryRequest, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: Log(complex.BinaryRequest) returns (complex.OperationResponse);
     */
    log(input: BinaryRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    log(input: BinaryRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    log(input: BinaryRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    log(input: BinaryRequest, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: Round(complex.BinaryRequest) returns (complex.OperationResponse);
     */
    round(input: BinaryRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    round(input: BinaryRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    round(input: BinaryRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    round(input: BinaryRequest, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service complex.ComplexCompute
 */
export class ComplexComputeClient extends grpc.Client implements IComplexComputeClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: Sqrt(complex.UnaryRequest) returns (complex.OperationResponse);
     */
    sqrt(input: UnaryRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: OperationResponse) => void)): grpc.ClientUnaryCall {
        const method = ComplexCompute.methods[0];
        return this.makeUnaryRequest<UnaryRequest, OperationResponse>(`/${ComplexCompute.typeName}/${method.name}`, (value: UnaryRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperationResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: Abs(complex.UnaryRequest) returns (complex.OperationResponse);
     */
    abs(input: UnaryRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: OperationResponse) => void)): grpc.ClientUnaryCall {
        const method = ComplexCompute.methods[1];
        return this.makeUnaryRequest<UnaryRequest, OperationResponse>(`/${ComplexCompute.typeName}/${method.name}`, (value: UnaryRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperationResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: Power(complex.BinaryRequest) returns (complex.OperationResponse);
     */
    power(input: BinaryRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: OperationResponse) => void)): grpc.ClientUnaryCall {
        const method = ComplexCompute.methods[2];
        return this.makeUnaryRequest<BinaryRequest, OperationResponse>(`/${ComplexCompute.typeName}/${method.name}`, (value: BinaryRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperationResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: Log(complex.BinaryRequest) returns (complex.OperationResponse);
     */
    log(input: BinaryRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: OperationResponse) => void)): grpc.ClientUnaryCall {
        const method = ComplexCompute.methods[3];
        return this.makeUnaryRequest<BinaryRequest, OperationResponse>(`/${ComplexCompute.typeName}/${method.name}`, (value: BinaryRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperationResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: Round(complex.BinaryRequest) returns (complex.OperationResponse);
     */
    round(input: BinaryRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: OperationResponse) => void)): grpc.ClientUnaryCall {
        const method = ComplexCompute.methods[4];
        return this.makeUnaryRequest<BinaryRequest, OperationResponse>(`/${ComplexCompute.typeName}/${method.name}`, (value: BinaryRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperationResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
