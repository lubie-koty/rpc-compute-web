// @generated by protobuf-ts 2.10.0 with parameter client_grpc1
// @generated from protobuf file "service-combined.proto" (package "protos", syntax proto3)
// tslint:disable
import { CombinedCompute } from "./service-combined";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { OperationRequest } from "./service-combined";
import type { RepeatedOperationRequest } from "./service-combined";
import type { OperationResponse } from "./service-combined";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service protos.CombinedCompute
 */
export interface ICombinedComputeClient {
    /**
     * @generated from protobuf rpc: RootMeanSquare(stream protos.RepeatedOperationRequest) returns (protos.OperationResponse);
     */
    rootMeanSquare(metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientWritableStream<RepeatedOperationRequest>;
    rootMeanSquare(metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientWritableStream<RepeatedOperationRequest>;
    rootMeanSquare(options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientWritableStream<RepeatedOperationRequest>;
    rootMeanSquare(callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientWritableStream<RepeatedOperationRequest>;
    /**
     * @generated from protobuf rpc: GeometricMean(protos.RepeatedOperationRequest) returns (stream protos.OperationResponse);
     */
    geometricMean(input: RepeatedOperationRequest, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<OperationResponse>;
    geometricMean(input: RepeatedOperationRequest, options?: grpc.CallOptions): grpc.ClientReadableStream<OperationResponse>;
    /**
     * @generated from protobuf rpc: BodyMassIndex(stream protos.OperationRequest) returns (stream protos.OperationResponse);
     */
    bodyMassIndex(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<OperationRequest, OperationResponse>;
    bodyMassIndex(options?: grpc.CallOptions): grpc.ClientDuplexStream<OperationRequest, OperationResponse>;
    /**
     * @generated from protobuf rpc: PowerLevelDiff(protos.OperationRequest) returns (protos.OperationResponse);
     */
    powerLevelDiff(input: OperationRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    powerLevelDiff(input: OperationRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    powerLevelDiff(input: OperationRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    powerLevelDiff(input: OperationRequest, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: PercentageValueChange(protos.OperationRequest) returns (protos.OperationResponse);
     */
    percentageValueChange(input: OperationRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    percentageValueChange(input: OperationRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    percentageValueChange(input: OperationRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
    percentageValueChange(input: OperationRequest, callback: (err: grpc.ServiceError | null, value?: OperationResponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service protos.CombinedCompute
 */
export class CombinedComputeClient extends grpc.Client implements ICombinedComputeClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: RootMeanSquare(stream protos.RepeatedOperationRequest) returns (protos.OperationResponse);
     */
    rootMeanSquare(metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: OperationResponse) => void)): grpc.ClientWritableStream<RepeatedOperationRequest> {
        const method = CombinedCompute.methods[0];
        return this.makeClientStreamRequest<RepeatedOperationRequest, OperationResponse>(`/${CombinedCompute.typeName}/${method.name}`, (value: RepeatedOperationRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperationResponse => method.O.fromBinary(value, this._binaryOptions), (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GeometricMean(protos.RepeatedOperationRequest) returns (stream protos.OperationResponse);
     */
    geometricMean(input: RepeatedOperationRequest, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<OperationResponse> {
        const method = CombinedCompute.methods[1];
        return this.makeServerStreamRequest<RepeatedOperationRequest, OperationResponse>(`/${CombinedCompute.typeName}/${method.name}`, (value: RepeatedOperationRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperationResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
    /**
     * @generated from protobuf rpc: BodyMassIndex(stream protos.OperationRequest) returns (stream protos.OperationResponse);
     */
    bodyMassIndex(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<OperationRequest, OperationResponse> {
        const method = CombinedCompute.methods[2];
        return this.makeBidiStreamRequest<OperationRequest, OperationResponse>(`/${CombinedCompute.typeName}/${method.name}`, (value: OperationRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperationResponse => method.O.fromBinary(value, this._binaryOptions), (metadata as any), options);
    }
    /**
     * @generated from protobuf rpc: PowerLevelDiff(protos.OperationRequest) returns (protos.OperationResponse);
     */
    powerLevelDiff(input: OperationRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: OperationResponse) => void)): grpc.ClientUnaryCall {
        const method = CombinedCompute.methods[3];
        return this.makeUnaryRequest<OperationRequest, OperationResponse>(`/${CombinedCompute.typeName}/${method.name}`, (value: OperationRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperationResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: PercentageValueChange(protos.OperationRequest) returns (protos.OperationResponse);
     */
    percentageValueChange(input: OperationRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OperationResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: OperationResponse) => void)): grpc.ClientUnaryCall {
        const method = CombinedCompute.methods[4];
        return this.makeUnaryRequest<OperationRequest, OperationResponse>(`/${CombinedCompute.typeName}/${method.name}`, (value: OperationRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperationResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
