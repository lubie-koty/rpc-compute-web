// @generated by protobuf-ts 2.10.0 with parameter client_grpc1
// @generated from protobuf file "service-complex.proto" (package "complex", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message complex.UnaryRequest
 */
export interface UnaryRequest {
    /**
     * @generated from protobuf field: double number = 1;
     */
    number: number;
}
/**
 * @generated from protobuf message complex.BinaryRequest
 */
export interface BinaryRequest {
    /**
     * @generated from protobuf field: double first_number = 1;
     */
    firstNumber: number;
    /**
     * @generated from protobuf field: double second_number = 2;
     */
    secondNumber: number;
}
/**
 * @generated from protobuf message complex.OperationResponse
 */
export interface OperationResponse {
    /**
     * @generated from protobuf field: double result = 1;
     */
    result: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class UnaryRequest$Type extends MessageType<UnaryRequest> {
    constructor() {
        super("complex.UnaryRequest", [
            { no: 1, name: "number", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<UnaryRequest>): UnaryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.number = 0;
        if (value !== undefined)
            reflectionMergePartial<UnaryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnaryRequest): UnaryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double number */ 1:
                    message.number = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnaryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double number = 1; */
        if (message.number !== 0)
            writer.tag(1, WireType.Bit64).double(message.number);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message complex.UnaryRequest
 */
export const UnaryRequest = new UnaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BinaryRequest$Type extends MessageType<BinaryRequest> {
    constructor() {
        super("complex.BinaryRequest", [
            { no: 1, name: "first_number", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "second_number", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<BinaryRequest>): BinaryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firstNumber = 0;
        message.secondNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<BinaryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BinaryRequest): BinaryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double first_number */ 1:
                    message.firstNumber = reader.double();
                    break;
                case /* double second_number */ 2:
                    message.secondNumber = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BinaryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double first_number = 1; */
        if (message.firstNumber !== 0)
            writer.tag(1, WireType.Bit64).double(message.firstNumber);
        /* double second_number = 2; */
        if (message.secondNumber !== 0)
            writer.tag(2, WireType.Bit64).double(message.secondNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message complex.BinaryRequest
 */
export const BinaryRequest = new BinaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationResponse$Type extends MessageType<OperationResponse> {
    constructor() {
        super("complex.OperationResponse", [
            { no: 1, name: "result", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<OperationResponse>): OperationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        if (value !== undefined)
            reflectionMergePartial<OperationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OperationResponse): OperationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double result */ 1:
                    message.result = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OperationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Bit64).double(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message complex.OperationResponse
 */
export const OperationResponse = new OperationResponse$Type();
/**
 * @generated ServiceType for protobuf service complex.ComplexCompute
 */
export const ComplexCompute = new ServiceType("complex.ComplexCompute", [
    { name: "Sqrt", options: {}, I: UnaryRequest, O: OperationResponse },
    { name: "Abs", options: {}, I: UnaryRequest, O: OperationResponse },
    { name: "Power", options: {}, I: BinaryRequest, O: OperationResponse },
    { name: "Log", options: {}, I: BinaryRequest, O: OperationResponse },
    { name: "Round", options: {}, I: BinaryRequest, O: OperationResponse }
]);
